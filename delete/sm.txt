pragma solidity ^0.8.0;

contract ProductPricing {
    address private admin;
    uint private userCount;
    uint private constant maxUsers = 10;

    struct User {
        string name;
        string email;
        uint productsRated;
    }

    struct Product {
        string name;
        string description;
        string[] images;
        mapping(address => uint) prices;
        bool isOpen;
    }

    mapping(address => User) private users;
    mapping(uint => Product) private products;

    constructor() {
        admin = msg.sender;
        userCount = 0;
    }

    modifier onlyAdmin() {
        require(msg.sender == admin, "Only the admin can perform this action");
        _;
    }

    modifier onlyOpen(uint _productId) {
        require(products[_productId].isOpen, "Product is not open for rating");
        _;
    }

    modifier userLimitNotReached() {
        require(userCount < maxUsers, "User limit reached");
        _;
    }

    function addUser(address _userAddress, string memory _name, string memory _email) public onlyAdmin userLimitNotReached {
        require(users[_userAddress].productsRated == 0, "User is already added or has rated products");

        users[_userAddress] = User({
            name: _name,
            email: _email,
            productsRated: 0
        });
        userCount++;
    }

    function createProduct(uint _productId, string memory _name, string memory _description, string[] memory _images) public onlyAdmin {
        require(!products[_productId].isOpen, "Product already exists and is open for rating");

        products[_productId] = Product({
            name: _name,
            description: _description,
            images: _images,
            isOpen: true
        });
    }

    function closeProduct(uint _productId) public onlyAdmin onlyOpen(_productId) {
        products[_productId].isOpen = false;
    }

    function rateProduct(uint _productId, uint _price) public onlyOpen(_productId) {
        require(_price > 0, "Price must be greater than zero");

        Product storage product = products[_productId];
        User storage user = users[msg.sender];

        product.prices[msg.sender] = _price;
        user.productsRated++;
    }

    function getProductPrice(uint _productId) public view returns (uint) {
        Product storage product = products[_productId];

        require(!product.isOpen, "Product is still open for rating");

        uint totalPrice = 0;
        uint count = 0;

        for (uint i = 0; i < userCount; i++) {
            address userAddress = address(i);

            if (product.prices[userAddress] > 0) {
                totalPrice += product.prices[userAddress];
                count++;
            }
        }

        require(count > 0, "No ratings available for this product");

        return totalPrice / count;
    }

    function getUser(address _userAddress) public view returns (string memory, string memory, uint) {
        User storage user = users[_userAddress];

        return (user.name, user.email, user.productsRated);
    }

    function getProduct(uint _productId) public view returns (string memory, string memory, string[] memory, bool) {
        Product storage product = products[_productId];

        return (product.name, product.description, product.images, product.isOpen);
    }
}
