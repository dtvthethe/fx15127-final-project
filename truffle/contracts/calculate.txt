["a.png", "b.png"]
["c.png", "d.png"]

0x2a98805abf699f0249bba03671b32ec971a899424085b4ad3f94acd1120f511d
0xb29d6a518f9f11a00e5cb73dffd8620bf5418d16d43422827248a1fb7a74a1fe

// Calculate suggest price.
    // function calculateSuggestPrice() public onlyAdmin {
    //     mapping(address => uint256) prices = session.participantPrices;
    //     uint256 _suggestPrice = 0;
    //     uint256 sumOfPriceWithDeviation = 0;
    //     uint256 sumOfDeviation = 0;

    //     for (uint256 i = 0; i < participantPricings.length; i++) {
    //         sumOfPriceWithDeviation += prices[participantPricings[i]] * (100 - saiSoNguoiDinhGiaI);
    //         sumOfDeviation += saiSoNguoiDinhGiaI;
    //     }

    //     _suggestPrice = sumOfPriceWithDeviation / ((100 * participantPricings.length) - sumOfDeviation);
    //     session.suggestPrice = _suggestPrice;
    // }

    // // Calculate deviation in session.
    // function calculateDeviationInSession(address _account) public onlyAdmin onlyFinalPriceMustSetValue returns (uint256) {
    //     uint256 _deviation = 0;
    //     uint256 _subDeviation = (session.finalPrice - session.participantPrices[_account]).abs();
    //     _deviation = (_subDeviation / session.finalPrice) * 100;

    //     return _deviation;
    // }

    // // Calculate deviation.
    // function calculateDeviation(address _account) public onlyAdmin onlyFinalPriceMustSetValue returns (uint256) {
    //     uint256 _deviation = 0;
    //     // TODO: confirm lai cong thuc tinh deviation.
    //     uint256 _subDeviation = (MainContract.getParticipant(_account).deviation * n) + calculateDeviationInSession(_account);
    //     _deviation = _subDeviation / (n + 1);
    //     return _deviation;
    // }





// Calculate suggest price.
    function calculateSuggestPrice() public onlyAdmin {
        mapping(address => uint256) prices = session.participantPrices;
        uint256 _suggestPrice = 0;
        uint256 sumOfPriceWithDeviation = 0;
        uint256 sumOfDeviation = 0;

        for (uint256 i = 0; i < participantPricings.length; i++) {
            sumOfPriceWithDeviation += prices[participantPricings[i]] * (100 - saiSoNguoiDinhGiaI);
            sumOfDeviation += saiSoNguoiDinhGiaI;
        }

        _suggestPrice = sumOfPriceWithDeviation / ((100 * participantPricings.length) - sumOfDeviation);
        session.suggestPrice = _suggestPrice;
    }

    // Calculate deviation in session.
    function calculateDeviationInSession(address _account) public onlyAdmin onlyFinalPriceMustSetValue returns (uint256) {
        uint256 _deviation = 0;
        uint256 _subDeviation = (session.finalPrice - session.participantPrices[_account]).abs();
        _deviation = (_subDeviation / session.finalPrice) * 100;

        return _deviation;
    }

    // Calculate deviation.
    function calculateDeviation(address _account) public onlyAdmin onlyFinalPriceMustSetValue returns (uint256) {
        uint256 _deviation = 0;
        // TODO: confirm lai cong thuc tinh deviation.
        uint256 _subDeviation = (MainContract.getParticipant(_account).deviation * n) + calculateDeviationInSession(_account);
        _deviation = _subDeviation / (n + 1);
        return _deviation;
    }
